# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import passwords

reload(passwords)

c = BuildmasterConfig = {}

####### WORKERS

benchmark_workers = ['napoleon', 'gpu03-diku-apl']

c['workers'] = [ worker.Worker(w, passwords.passwords[w]) for w in benchmark_workers ]

# We do not want to run benchmarks unless we can get the entire worker
# to ourselves, so we define a per-worker lock.  Benchmark builders
# will take this lock exclusively.
build_lock = util.WorkerLock("worker_builds",
                             maxCount=10)

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'git://github.com/HIPERFIT/futhark.git',
    workdir='gitpoller-futhark', branches=True,
    pollinterval=300))
c['change_source'].append(changes.GitPoller(
    'git://github.com/HIPERFIT/futhark-benchmarks.git',
    workdir='gitpoller-futhark-benchmarks', branches=True,
    pollinterval=300))

####### SCHEDULERS

c['schedulers'] = []

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="all",
    change_filter=util.ChangeFilter(branch_re='master.*'),
    treeStableTimer=None,
    builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="run-tests",
    builderNames=["runtests"]))

c['schedulers'].append(
    schedulers.Nightly(name='nightly',
                       branch='master',
                       builderNames=['build-nightly'],
                       hour=3, minute=0))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force-nightly",
    builderNames=["build-nightly"]))

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="runbench",
    change_filter=util.ChangeFilter(branch='master'),
    treeStableTimer=None,
    builderNames=["runbench"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name='run-benchmarks',
    builderNames=['runbench']))


####### BUILDERS

c['builders'] = []

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='git://github.com/HIPERFIT/futhark.git',
                          mode='incremental'))
factory.addStep(steps.ShellCommand(command=["stack", "build", "alex", "happy", "-j16"],
                                   description='building'))
factory.addStep(steps.ShellCommand(command=["stack", "--no-terminal", "test", "-j16"],
                                   description='unit tests'))
factory.addStep(steps.ShellCommand(command=["stack", "exec", "futhark-test", "data/tests"],
                                   description='program tests (CPU)'))
factory.addStep(steps.ShellCommand(command='stack exec -- futhark-test --compiler=futhark-opencl --exclude no_opencl data/tests',
                                   description='program tests (OpenCL)'))

c['builders'].append(
    util.BuilderConfig(name="runtests",
                       workernames=benchmark_workers,
                       factory=factory,
                       locks=[build_lock.access('counting')]))

tarball_factory = util.BuildFactory()
tarball_factory.addStep(steps.Git(repourl='git://github.com/HIPERFIT/futhark.git', mode='incremental'))
tarball_factory.addStep(steps.ShellCommand(command='tools/release/binary-tarball.sh . -nightly-linux-x86_64',
                                           description='Making tarball'))
tarball_factory.addStep(steps.FileUpload(workersrc='futhark-nightly-linux-x86_64.tar.xz',
                                         masterdest='futhark-nightly-linux-x86_64.tar.xz'))
tarball_factory.addStep(steps.MasterShellCommand(
    command=['scp', '-i' '/home/athas/.ssh/futhark_id_rsa', 'futhark-nightly-linux-x86_64.tar.xz', 'futhark@sigkill.dk:/var/www/htdocs/futhark-lang.org/releases'],
    description='Upload tarball'))

c['builders'].append(
    util.BuilderConfig(name="build-nightly",
                       workernames=['napoleon'],
                       factory=tarball_factory,
                       locks=[build_lock.access('counting')]))

bench_factory = util.BuildFactory()
bench_factory.addStep(steps.Git(repourl='git://github.com/HIPERFIT/futhark.git', mode='incremental'))
bench_factory.addStep(steps.Git(repourl='git://github.com/HIPERFIT/futhark-benchmarks.git',
                                mode='incremental',
                                workdir='build/futhark-benchmarks'))
bench_factory.addStep(steps.ShellCommand(command='stack build',
                                         description='build'))
bench_factory.addStep(steps.ShellCommand(command='stack exec -- futhark-bench --compiler=futhark-opencl futhark-benchmarks --json bench.json',
                                         description='benchmark (OpenCL)'))
bench_factory.addStep(steps.FileUpload(workersrc='bench.json',
                                       masterdest=util.Interpolate('%(prop:workername)s-%(prop:got_revision)s.json')))
tarball_factory.addStep(steps.MasterShellCommand(
    command=['scp', '-i' '/home/athas/.ssh/futhark_id_rsa', util.Interpolate('%(prop:workername)s-%(prop:got_revision)s.json'), 'futhark@sigkill.dk:/var/www/htdocs/futhark-lang.org/benchmark-results/'],
    description='Upload to futhark-lang.org/benchmark-results'))

c['builders'].append(util.BuilderConfig(name="runbench",
                                        workernames=['napoleon'],
                                        factory=bench_factory,
                                        locks=[build_lock.access('exclusive')]))

####### STATUS TARGETS

c['status'] = []

####### SERVICES

c['services'] = []

from buildbot.plugins import reporters
irc = reporters.IRC("irc.freenode.org", "futbot",
                    useColors=False,
                    channels=[{"channel": "#futhark"}],
                    notify_events={
                        'exception': 1,
                        'successToFailure': 1,
                        'failureToSuccess': 1,
                    })
c['services'].append(irc)

from buildbot.plugins import reporters
mn = reporters.MailNotifier(fromaddr="buildbot@futhark-lang.org")
c['services'].append(mn)

####### PROJECT IDENTITY

c['title'] = "Futhark"
c['titleURL'] = "https://futhark-lang.org"
c['buildbotURL'] = "http://buildbot.futhark-lang.org/"

####### WWW UI config
authz = util.Authz(
    allowRules=[
        util.StopBuildEndpointMatcher(role="admins"),
        util.ForceBuildEndpointMatcher(role="admins"),
        util.RebuildBuildEndpointMatcher(role="admins")
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=["athas@sigkill.dk"]),
    ]
)

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=util.UserPasswordAuth({'athas@sigkill.dk': passwords.passwords['athas@sigkill.dk']}),
                authz=authz)

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
