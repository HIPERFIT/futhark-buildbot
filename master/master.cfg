# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import passwords
import re

reload(passwords)

c = BuildmasterConfig = {}

####### WORKERS

benchmark_workers = ['napoleon',
                     'gpu01-diku-apl',
                     'gpu02-diku-apl',
                     'gpu03-diku-apl',
                     'gpu04-diku-apl',
                     'titan-diku-apl',
                     'phi-diku-apl']

c['workers'] = [ worker.Worker(w, passwords.passwords[w]) for w in benchmark_workers ]

# We do not want to run benchmarks unless we can get the entire worker
# to ourselves, so we define a per-worker lock.  Benchmark builders
# will take this lock exclusively.
build_lock = util.WorkerLock("worker_builds",
                             maxCount=10)

c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    'git://github.com/diku-dk/futhark.git',
    workdir='gitpoller-futhark',
    branches=True,
    pollinterval=300))

####### BUILDERS

c['builders'] = []

# PYOPENCL_NO_CACHE is to work around some bugs in PyOpencL (or
# elsewhere, who knows).  STACK_ROOT is necessary because $HOME/.stack
# will become unmounted after a while unless the user running the
# buildbot-worker logs in regularly.
futhark_env = {'PYOPENCL_NO_CACHE': 'indeed',
               'STACK_ROOT': '/futhark-bb/stack_root'}


all_test_builders = []
all_benchmark_builders = []

tarball_factory = util.BuildFactory()
tarball_factory.addStep(steps.Git(repourl='git://github.com/diku-dk/futhark.git',
                                  mode='full',
                                  clobberOnFailure=True,
                                  haltOnFailure=True,
                                  method='clobber'))
tarball_factory.addStep(steps.ShellCommand(command='stack setup',
                                           description='setting up environment',
                                           haltOnFailure=True,
                                           env=futhark_env))
tarball_factory.addStep(steps.ShellCommand(command='stack build --haddock',
                                           description='building haddocks',
                                           haltOnFailure=True,
                                           env=futhark_env))
tarball_factory.addStep(steps.ShellCommand(command='tools/release/binary-tarball.sh . -nightly-linux-x86_64',
                                           description='Making tarball',
                                           haltOnFailure=True,
                                           env=futhark_env))
tarball_factory.addStep(steps.FileUpload(workersrc='futhark-nightly-linux-x86_64.tar.xz',
                                         masterdest='futhark-nightly-linux-x86_64.tar.xz',
                                         haltOnFailure=True))
tarball_factory.addStep(steps.SetPropertyFromCommand(command='stack path --local-doc-root',
                                                     property='haddock_path',
                                                     env=futhark_env))
tarball_factory.addStep(steps.DirectoryUpload(workersrc=util.Property('haddock_path'),
                                              masterdest='haddock'))
tarball_factory.addStep(steps.MasterShellCommand(
    command="rsync --chmod=Do+rx,Fo+r --checksum -ave 'ssh -p 22 -i /home/athas/.ssh/futhark_id_rsa' haddock futhark@sigkill.dk:/var/www/htdocs/futhark-lang.org/",
    description='Upload Haddock'))
tarball_factory.addStep(steps.ShellCommand(
    command="stack exec -- futhark-doc futlib -o generated_docs",
    description='Generate documentation for futlib',
    env=futhark_env))
tarball_factory.addStep(steps.DirectoryUpload(workersrc='generated_docs',
                                              masterdest='docs'))
tarball_factory.addStep(steps.MasterShellCommand(
    command="rsync --chmod=Do+rx,Fo+r --checksum -ave 'ssh -p 22 -i /home/athas/.ssh/futhark_id_rsa' docs futhark@sigkill.dk:/var/www/htdocs/futhark-lang.org/",
    description='Upload generated documentation'))
tarball_factory.addStep(steps.MasterShellCommand(
    command=['scp', '-i' '/home/athas/.ssh/futhark_id_rsa', 'futhark-nightly-linux-x86_64.tar.xz', 'futhark@sigkill.dk:/var/www/htdocs/futhark-lang.org/releases'],
    description='Upload tarball'))

c['builders'].append(
    util.BuilderConfig(name="build-nightly",
                       workernames=benchmark_workers,
                       factory=tarball_factory,
                       locks=[build_lock.access('counting')]))

def pass_options(options):
    return ' '.join(['--pass-option=' + option for option in options])

def add_test_builder(tag='', compilers=[], options=[], workers=[], runs=10):
    factory = util.BuildFactory()
    # check out the source
    factory.addStep(steps.Git(repourl='git://github.com/diku-dk/futhark.git',
                              mode='full',
                              clobberOnFailure=True,
                              method='clobber',
                              haltOnFailure=True))
    factory.addStep(steps.ShellCommand(command='stack setup',
                                       description='setting up environment',
                                       haltOnFailure=True,
                                       env=futhark_env))
    factory.addStep(steps.ShellCommand(command=["stack", "build", "alex", "happy", "-j16"],
                                       description='building',
                                       env=futhark_env))
    factory.addStep(steps.ShellCommand(command=["stack", "--no-terminal", "test", "-j16"],
                                       description='unit tests',
                                       haltOnFailure=True,
                                       env=futhark_env))

    for compiler in compilers:
        if type(compiler) is tuple:
            compiler, exclude = compiler
        else:
            exclude = 'disable'

        factory.addStep(steps.ShellCommand(
            command='stack exec -- futhark-test -c --compiler=%s --exclude=%s %s tests examples' % (compiler, exclude, pass_options(options)),
            description='program tests (%s)' % compiler,
            env=futhark_env))
    c['builders'].append(util.BuilderConfig(name=tag+'-test',
                                            workernames=workers,
                                            factory=factory,
                                            locks=[build_lock.access('exclusive')]))
    all_test_builders.append(tag+'-test')


def add_benchmark_builder(tag='', compilers=[], options=[], workers=[], runs=10):
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl='git://github.com/diku-dk/futhark.git',
                              mode='full',
                              clobberOnFailure=True,
                              method='clobber'))
    factory.addStep(steps.Git(repourl='git://github.com/diku-dk/futhark-benchmarks.git',
                              mode='incremental',
                              workdir='build/futhark-benchmarks',
                              shallow=True,
                              branch='master',
                              alwaysUseLatest=True,
                              clobberOnFailure=True))
    factory.addStep(steps.ShellCommand(command='stack setup',
                                       description='setting up environment',
                                       haltOnFailure=True,
                                       env=futhark_env))
    factory.addStep(steps.ShellCommand(command='stack build',
                                       description='build',
                                       haltOnFailure=True,
                                       env=futhark_env))
    for compiler in compilers:
        if type(compiler) is tuple:
            compiler, exclude = compiler

        results_filename = util.Interpolate(
            '%(kw:compiler)s-%(kw:suffix)s-%(prop:futhark_revision)s.json',
            compiler=compiler,
            suffix=tag)

        factory.addStep(steps.ShellCommand(command='stack exec -- futhark-bench --compiler=%s futhark-benchmarks %s --json bench.json --runs %d' % (compiler, pass_options(options), runs),
                                           description='benchmark (%s)' % compiler,
                                           haltOnFailure=False,
                                           env=futhark_env))
        factory.addStep(steps.SetPropertyFromCommand(command="git rev-parse HEAD", property="futhark_revision"))
        factory.addStep(steps.FileUpload(
            workersrc='bench.json',
            masterdest=results_filename,
            mode=0644))
        factory.addStep(steps.MasterShellCommand(
            command=['scp', '-i' '/home/athas/.ssh/futhark_id_rsa', results_filename, 'futhark@sigkill.dk:/var/www/htdocs/futhark-lang.org/benchmark-results/'],
            description='Upload to futhark-lang.org/benchmark-results'))

    c['builders'].append(util.BuilderConfig(name=tag+'-benchmark',
                                            workernames=workers,
                                            factory=factory,
                                            locks=[build_lock.access('exclusive')]))

    all_benchmark_builders.append(tag+'-benchmark')

def add_benchmark_and_test_builders(**kwargs):
    add_test_builder(**kwargs)
    add_benchmark_builder(**kwargs)

add_benchmark_and_test_builders(tag='W8100',
                                compilers=[('futhark-opencl', 'no_opencl'),
                                           ('futhark-pyopencl', 'no_opencl')],
                                options=['-pAMD', '-dHawaii'],
                                workers=['napoleon'])

add_benchmark_and_test_builders(tag='GTX780',
                                compilers=[('futhark-opencl', 'no_opencl'),
                                           ('futhark-pyopencl', 'no_opencl')],
                                options=['-pNVIDIA', '-d#1'],
                                workers=['gpu01-diku-apl', 'gpu02-diku-apl',
                                         'gpu03-diku-apl',
                                         'gpu04-diku-apl'])

add_benchmark_and_test_builders(tag='K40',
                                compilers=[('futhark-opencl', 'no_opencl'),
                                           ('futhark-pyopencl', 'no_opencl')],
                                options=['-pNVIDIA'],
                                workers=['phi-diku-apl'])


add_benchmark_and_test_builders(tag='TITANBlack',
                                compilers=[('futhark-opencl', 'no_opencl'),
                                           ('futhark-pyopencl', 'no_opencl')],
                                options=['-pNVIDIA', '-dTITAN'],
                                workers=['titan-diku-apl'])

####### SCHEDULERS

def isImportant(change):
    # Directories containing files whose modification should trigger
    # rebuilds.
    important = ['src', 'data', 'rts']

    for file in change.files:
        for pattern in important:
            if re.match(pattern, file):
                return True
    return False

c['schedulers'] = []

c['schedulers'].append(schedulers.SingleBranchScheduler(
    name="full",
    change_filter=util.ChangeFilter(branch_re='master.*'),
    treeStableTimer=None,
    builderNames=all_test_builders+all_benchmark_builders,
    fileIsImportant=isImportant))
c['schedulers'].append(
    schedulers.Nightly(name='nightly',
                       branch='master',
                       builderNames=['build-nightly'],
                       hour=3, minute=0))

c['schedulers'].append(schedulers.ForceScheduler(
    name="force-nightly",
    builderNames=["build-nightly"]))
c['schedulers'].append(schedulers.ForceScheduler(
    name="forcetest",
    builderNames=all_test_builders))
c['schedulers'].append(schedulers.ForceScheduler(
    name='forcebench',
    builderNames=all_benchmark_builders))

####### STATUS TARGETS

c['status'] = []

####### SERVICES

c['services'] = []

from buildbot.plugins import reporters
irc = reporters.IRC("irc.freenode.org", "futbot",
                    useColors=False,
                    channels=[{"channel": "#futhark"}],
                    notify_events={
                        'exception': 1,
                        'successToFailure': 1,
                        'failureToSuccess': 1,
                    })
c['services'].append(irc)

from buildbot.plugins import reporters
mn = reporters.MailNotifier(fromaddr="buildbot@futhark-lang.org")
c['services'].append(mn)

####### PROJECT IDENTITY

c['title'] = "Futhark"
c['titleURL'] = "https://futhark-lang.org"
c['buildbotURL'] = "http://buildbot.futhark-lang.org/"

####### WWW UI config
authz = util.Authz(
    allowRules=[
        util.StopBuildEndpointMatcher(role="admins"),
        util.ForceBuildEndpointMatcher(role="admins"),
        util.RebuildBuildEndpointMatcher(role="admins")
    ],
    roleMatchers=[
        util.RolesFromEmails(admins=["athas@sigkill.dk"]),
    ]
)

c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}),
                auth=util.UserPasswordAuth({'athas@sigkill.dk': passwords.passwords['athas@sigkill.dk']}),
                authz=authz)

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
